/**
 * OQTO CASCADING CONFIGURATION SHEET
 *         PEG.JS GRAMMAR
 */

{
	// @include functions.js
}

start
	= document:(_? statement:statement _? {return statement})*
		{
			var doc = [];
			for (var i = 0, len = document.length; i < len; i++)
				if (document[i] != undefined)
					doc.push(document[i]);
			return flatten(doc);
		}
	;

/****************************************
 * STATEMENTS
 ***************************************/
statement
	= directive:statement_directive
		{return {type: 'directive', directive: directive}}
	/ inner_statement
	;

inner_statement
	= comment
	/ rule:rule
		{return {type: 'rule', rule: rule}}
	;

statement_directive
	= '@' directive:directive _? ';'
		{return directive}

/****************************************
 * RULES
 ***************************************/
rule
	= conditionals:conditional_multiple _?
	  '{' _? nodes:(node:rule_node _? {return node})* '}'
	 	{return {conditionals: conditionals,
	 		nodes: $U(typeof nodes) ? flatten(nodes) : []}}

rule_node
	= inner_statement
	/ node:configuration
		{
			return flatten([node]).map(function(config) {
				return {type: 'config', config: config};
			});
		}
	/ log:comment_log
		{return {type: 'log', log: log}}
	;

/****************************************
 * COMMENT-LOGS
 ***************************************/
comment_log
	= log:comment_log_info
		{return {level: 'info', message: log}}
	/ log:comment_log_warn
		{return {level: 'warn', message: log}}
	/ log:comment_log_error
		{return {level: 'error', message: log}}
	;

comment_log_info
	= '`' message:comment_log_message
		{return message}
	;

comment_log_warn
	= '?' message:comment_log_message
		{return message}
	;

comment_log_error
	= '!' message:comment_log_message
		{return message}
	;

comment_log_message
	= $[^\n\r\f]+
	;

/****************************************
 * CONFIGURATION VALUES
 ***************************************/
configuration
	= value:configuration_value _? ';'
		{return value}
	;

configuration_value
	= configuration_value_partial
	/ configuration_value_single
	;

configuration_value_single
	= name:basic_identifier op:configuration_operator
	  values:(_ value:value {return value})+
		{return {name: name, values: values, append: op}}
	;

configuration_value_partial
	= prefix:configuration_value_partial_prefix
	  entries:(_ entry:configuration_value_partial_entry {return entry})+
		{
			return entries.map(function(entry){
				return {name: prefix + entry.postfix,
					values: entry.values};
			});
		}
	;

configuration_value_partial_entry
	= postfix:basic_identifier op:configuration_operator _?
	  values:configuration_value_partial_entry_values
		{return {postfix: postfix, values: values, append: op}}
	;

configuration_value_partial_entry_values
	= first:configuration_value_partial_entry_value
	  other:(_ value:configuration_value_partial_entry_value {return value})*
		{
			if ($U(other))
				return [first].concat(other);
			return [first];
		}
	;

configuration_value_partial_entry_value
	= !(value ':') value:value
		{return value}
	;

configuration_value_partial_prefix
	= $(('-'+)? ([a-z0-9\_]+ '-')+)
	;

configuration_operator
	= ':>'
		{return true}
	/ ':'
		{return false}
	;

/****************************************
 * CONDITIONALS
 ***************************************/
conditional_multiple
	= first:conditional_single
	  other:(_? ',' _? rule:conditional_single {return rule;})*
	  	{
	  		if ($U(typeof other))
	  			return [first].concat(other);
	  		return [first];
	  	}

conditional_single
	= first:selector other:(_ selector:selector {return selector})*
		{
			if ($U(typeof other))
				return [first].concat(other);
			return [first];
		}
	;

/****************************************
 * DIRECTIVES
 ***************************************/
directive
	= directive_use
	/ directive_import
	/ directive_vendor
	;

directive_use
	= 'use' _ module:value name:(_ 'as' _ name:value {return name})?
		{return {name: module, alias: ($U(typeof name) ? name : null)}}

directive_import
	= 'import' _ imp:value
		{return {imp: imp}}

directive_vendor
	= 'vendor' _ prefix:value name:(_ 'as' _ name:value {return name})?
		{return {prefix: prefix, alias: ($U(typeof name) ? name : null)}}

/****************************************
 * SELECTOR IDENTIFIER RULES
 ***************************************/
selector
	= selector:selector_env
		{return {type: 'env', selector: selector}}
	/ selector:selector_task
		{return {type: 'task', selector: selector}}
	/ selector:selector_class
		{return {type: 'class', selector: selector}}
	/ selector:selector_glob
		{return {type: 'glob', selector: selector}}
	/ selector:selector_config
		{return {type: 'config', selector: selector}}
	/ selector:selector_task_result
		{return {type: 'result', selector: selector}}
	/ selector_all
		{return {type: 'all'}}
	;

selector_all
	= '*'
	;

selector_env
	= '@' token:selector_env_token args:selector_env_args?
		{return {name: token, args: args != null ? args : []}}
	;

selector_env_token
	= 'arch'		/* arch */
	/ 'os'			/* platform */
	/ 'system'		/* type */
	/ 'release'		/* release */
	;

selector_env_args
	= '(' _? first:selector_env_arg
	  other:(_ value:selector_env_arg {return value})* _? ')'
		{
			if ($U(other))
				return [first].concat(other);
			return [first];
		}
	;

selector_env_arg
	= operator:operator value:value
		{return {operator: operator, arg: value}}
	;

selector_task
	= '#' name:basic_identifier
		{return {name: name}}
	;

selector_class
	= '.' name:basic_identifier
		{return {name: name}}
	;

selector_glob
	= string:double_string
		{return {glob: string}}
	;

selector_config
	= '$' name:basic_identifier
	  operator:operator '=' value:value
		{return {name: name, operator: operator, value: value}}
	;

selector_task_result
	= '[' name:basic_identifier ']'
		{return {name: name}}
	;

/****************************************
 * OPERATORS
 ***************************************/
operator
	= not:'!'? op:operator_positive
		{
			if ($U(typeof not))
				return operator_not(op);
			return op;
		}

operator_positive
	= '*'
		{return operator_contains}
	/ '~'
		{return operator_inlist}
	/ '^'
		{return operator_begins}
	/ '$'
		{return operator_ends}
	/	{return operator_eq}
	;

/****************************************
 * BASIC RULES
 ***************************************/
value
	= string
	/ digits:$([0-9]+)
		{return parseInt(digits)}
	/ ('true' / 'yes' / 'on')
		{return true}
	/ ('false' / 'no' / 'off')
		{return false}
	/ basic_identifier
	;

basic_identifier
	= $([a-z\-\_]i [a-z\-_0-9]i*)
	;

string
	= double_string
	/ single_string
	;

single_string
	= '\'' string:$(escape_sequence / [^'])* '\''
		{return string}
	;

double_string
	= '"' string:$(escape_sequence / [^"])* '"'
		{return string}
	;
	
escape_sequence
	= '\\' escape:escape
		{return escape}
	;

escape
	= '"'
	/ '\''
	/ '\\'
	/ '/'
	/ 'b' { '\b' }
	/ 'f' { '\f' }
	/ 'n' { '\n' }
	/ 'r' { '\r' }
	/ 't' { '\t' }
	/ 'e' { '\x1b' }
	/ 'u' digits:$(hex_digit hex_digit hex_digit hex_digit)
		{return charCode(digits, 16)}
	/ 'x' digits:$(hex_digit hex_digit)
		{return charCode(digits, 16)}
	/ digits:$(octal_digit octal_digit octal_digit)
		{return charCode(digits, 8)}
	;

octal_digit
	= [0-8]
	;

hex_digit
	= [a-f0-9]i
	;

comment
	= '/*' (!'*/' .)+ '*/'
		{}
	;

_
	= (__ / comment)+
		{}
__
	= ([ \r\n\f\t])+
		{}
	;