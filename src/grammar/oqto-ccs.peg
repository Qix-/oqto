/**
 * OQTO CASCADING CONFIGURATION SHEET
 *         PEG.JS GRAMMAR
 */

{
	var $ = [];
}

start "ccs document"
	= comment
	;

/****************************************
 * INCLUSIONS
 ***************************************/
// @include ./tokens.peg

/****************************************
 * DIRECTIVES
 ***************************************/
directive "directive"
	= '@' directive_token
	  _ value_list
	  _? ';'
	;

/****************************************
 * SELECTOR IDENTIFIER RULES
 ***************************************/
selector "selector"
	= env_selector env_selector_args?
	/ task_selector
	/ class_selector
	/ glob_selector
	;

env_selector "environment selector"
	= '@' environment_token
	;

task_selector "task selector"
	= '#' basic_identifier
	;

class_selector "class selector"
	= '.' basic_identifier
	;

glob_selector "glob selector"
	= double_string
	;

env_selector_args "environment selector arguments"
	= '(' _? value (_ value)* _? ')'
	; 

/****************************************
 * BASIC RULES
 ***************************************/
value_list "value list"
	= init:value subs:(_ val:value {return val})*
		{return [init].concat(subs)}
	;

value "value"
	= string
	/ digits:$([0-9]+ &[^0-9])
		{return parseInt(digits)}
	/ ('true' / 'yes' / 'on')
		{return true}
	/ ('false' / 'no' / 'off')
		{return false}
	/ $([a-z\-_]i [a-z0-9\-_]i* &[^a-z\-_0-9]i)
	;

basic_identifier "identifier"
	= $([a-z\-\_]i [a-z\-_0-9]i*)
	;

string "string"
	= double_string
	/ single_string
	;

single_string "single quoted string"
	= '\'' string:$(escape_sequence / [^'])* '\''
		{return string}
	;

double_string "double quoted string"
	= '"' string:$(escape_sequence / [^"])* '"'
		{return string}
	;
	
escape_sequence "escape sequence"
	= '\\' escape:escape
		{return escape}
	;

escape "escape code"
	= '"'
	/ '\''
	/ '\\'
	/ '/'
	/ 'b' { '\b' }
	/ 'f' { '\f' }
	/ 'n' { '\n' }
	/ 'r' { '\r' }
	/ 't' { '\t' }
	/ 'e' { '\x1b' }
	/ 'u' digits:$(hex_digit hex_digit hex_digit hex_digit)
		{return String.fromCharCode(parseInt(digits, 16))}
	/ 'x' digits:$(hex_digit hex_digit)
		{return String.fromCharCode(parseInt(digits, 16)) }
	/ digits:$(octal_digit octal_digit octal_digit)
		{return String.fromCharCode(parseInt(digits, 8)) }
	;

octal_digit "octal digit"
	= [0-8]
	;

hex_digit "hexadecimal digit"
	= [a-f0-9]i
	;

comment "comment"
	= '/*' (!'*/' .)+ '*/'
		{}
	;

_ "whitespace"
	= ([ \r\n\f\t])+ {}
	;