/**
 * EXAMPLE OQTO CONFIGURATION FILE
 *
 *	This configuration file loosely
 *	describes a project that enlists
 *	the use of a [fake] preprocessor,
 *	checks for windows/linux and builds
 *	pre-processed C++ files into a static
 *	library.
 *
 *	Since it is a demonstrative example,
 *	some of the values won't make sense
 *	to someone who actually uses compilers
 *	regularly. :)
 */

/**
 * Imports the module `oqto-gcc`
 */
@use gcc;

/**
 * Imports the module `oqto-msvc11`
 *	calling it `msvc` (and is invoked
 *	as such)
 */
@use msvc11 as msvc;

/**
 * Imports the module `oqto-mslink11`
 *	calling it `link` (and is invoked
 *	as such)
 */
@use mslink11 as link;

/**
 * Make `-ms-cpp` prefix refer to
 *	`-msvc11-cpp` for shorthand
 */
@vendor msvc11 as ms;


/**
 * When the configuration value
 *	`debug` is true, we'll log
 *	a message.
 *
 *	This is only run once; since
 *	the rule has no environment,
 *	task, class or glob conditions
 *	it is run at the beginning of the
 *	build.
 */
$debug=true {
	/* Log a message */
	` building in debug mode
}

/**
 * First, set up what we want to do
 *	with the linked file.
 *
 *	`*` is a special selector and means
 *	'when running with no explicit tasks'
 *	(i.e. running `oqto` by itself).
 *	
 *	It acts as a 'default' entry point.
 *
 *	`[link]` pulls in the files generated
 *	by the `link` task, which has some
 *	rules and operations defined below.
 */
* [link] {
	/**
	 * Since `out` is now defined,
	 *	any applicable files that
	 *	were left over from this rule
	 *	(which, in this case, is anything
	 *	generated by `#link`)
	 *	are now dumped using a regex
	 *	replacement.
	 *
	 *	The `out` property is probably
	 *	going to have many usages
	 *	and will most likely ultimately be
	 *	processed differently internally
	 *	(dem adverbs...)
	 */
	out: /^src/bin/;
}

/**
 * Here is a fake 'preprocessor'
 *	(that is actually kind of a real project
 *	in the making) that uses lua scripts to
 *	generate C++ code.
 *
 *	Here, within the task `cpp-pre` and using
 *	files marked as `cppl-files` within .oqto
 *	files, we'll execute the `prelua` operation.
 */
#cpp-pre .cppl-files {
	~prelua {
		/**
		 * `prelua` defines its prefix as
		 *	`prelua`, so we could also set
		 *	`prelua-delim: '%lua';` as well.
		 *
		 *	However, since this is an operation-
		 *	specific configuration block (these
		 *	values don't propogate to any other
		 *	call to `prelua`), we can safely assume
		 *	all configuration values in here start
		 *	with `prelua-`.
		 */
		delim: '%lua';
	}
}

/**
 * This rule selects two sets of files:
 *  - When we're running the task `cpp` and the file
 *		has been given the class `cpp-files`
 *  - The output files from task `cpp-pre` that
 *		end in `.cxx` or `.cpp`
 *
 *	Note that condition order *is* important;
 *	however, environmental conditions and such
 *	are unaffected by order.
 */
#cpp .cpp-files,
[cpp-pre] "*.c(xx|pp)" {
	/**
	 * When debugging is on,
	 *	we'll set a few C++
	 *	defines that work on
	 *	every compiler.
	 *
	 *	The `cpp-` prefix with no
	 *	vendor prefix (i.e. `-gcc-` or `-msvc-`)
	 *	applies to ALL compilers (as all C++ compilers
	 *	must implement handling for 'naked' `cpp-`
	 *	configuration values
	 */
	$debug=true {
		cpp-define: DEBUG _DEBUG RDEBUG;
	}

	/**
	 * Comparison operators are similar to CSS's
	 */
	$debug!=true {
		cpp-define: RELEASE _RELEASE RRELEASE;
	}

	/**
	 * This is a shorthand syntax for
	 *	configuring many values at once
	 *	given a prefix.
	 *
	 *	The shorthand syntax is activated
	 *	with a dangling `-` and signaled
	 *	using `:`'s.
	 *
	 *	Due to the fact a colon'd identifier
	 *	denotes a new configuration value (with
	 *	the prefix prepended), these can all
	 *	go on the same line and still work - 
	 *	that is, if we wanted it to look terrible :)
	 */
	cpp-
		define: BUILD	/* Define `BUILD` */
		include:		/* Add include dirs */
			'$base/deps/libfoo/include'
			'$base/deps/libbar/include'
		;

	/**
	 * Nested rules are OK and are supported
	 *	by default.
	 *
	 *	This one checks for the win32 architecture
	 *	(environment values DO NOT correspond to
	 *	environment variables; those are configuration
	 *	values and can be accessed using the `env-` prefix)
	 *
	 *	Environment values are supplied by Node.
	 */
	@os(win32) {
		/**
		 * Due to the @use directive,
		 *	`msvc` actually refers to `msvc11`
		 */
		~msvc {
			safeseh: on;
			logo: no; /* off by default, anyway */
		}
	}

	/**
	 * Selects anything *not* on windows.
	 *
	 *	This means this project assumes any
	 *	other system it will be building on is
	 *	equipped with GCC
	 */
	@os(!win32) {
		/**
		 * Run GCC
		 */
		~gcc {
			warn: all;
		}
	}
}

/**
 * This runs when the task `link` is running
 *	and uses the files from the `cpp` task.
 */
#link [cpp] {
	@os(win32) {
		/**
		 * Display a warning
		 */
		? linking can be a scary thing!

		/**
		 * Setup linker
		 *
		 *	For demonstration purposes,
		 *	we'll use the long-hand syntax
		 *	to configure our linker.
		 */
		-ms-link-
			machine: x86	/* build for x86 */
			type: static	/* build a static lib */
			force: no		/* doesn't force a build */
			;

		/**
		 * This will only apply if debug isn't true.
		 */
		$debug!=true {
			-ms-link-debug: true;
		}

		/**
		 * Link!
		 */
		~link;
	}

	@os(!win32) {
		/**
		 * Throw a fatal error
		 */
		! linking is only suppported on windows!
	}
}

/**
 * Also very similar to CSS,
 *	certain pseudo-selectors can be
 *	used.
 */
*::after {
	` Done!
}